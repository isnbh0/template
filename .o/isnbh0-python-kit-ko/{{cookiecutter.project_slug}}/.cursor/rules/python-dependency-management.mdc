---
description: 
globs: 
alwaysApply: true
---
# Python Dependency Management Guidelines

Guidelines for properly managing Python dependencies using uv with pyproject.toml.

<rule>
name: "python-dependency-management"
description: "Guidelines for managing Python dependencies with uv and pyproject.toml"
rules:
  - "Use uv exclusively for all dependency management operations in this project"
  - "Use pyproject.toml for dependency specifications, NOT requirements.txt files"
  - "Pin exact versions for production dependencies (== syntax)"
  - "Use compatibility operators (>=) only for development dependencies"
  - "Document the purpose of each dependency in inline comments"
  - "Group dependencies by their function in optional-dependencies"
  - "Update dependencies regularly and methodically with security audits"
  - "Check for known vulnerabilities before adding new dependencies"
  - "Minimize the number of dependencies to reduce security risks"
  - "Test thoroughly after adding or updating dependencies"
  - "Prefer well-maintained, actively developed dependencies"
examples:
  - description: "Adding a new dependency with uv"
    correct: |
      ```bash
      # Check for the latest version and vulnerabilities first
      uv pip search package_name
      
      # Install the package with exact version pinning
      uv pip install package_name==1.2.3
      
      # After installation, add it to pyproject.toml in the appropriate section
      # Do NOT use requirements.txt files
      ```
      
      In pyproject.toml:
      ```toml
      [project]
      # ... other project metadata ...
      
      dependencies = [
          # Web framework for API endpoints
          "fastapi==0.104.0",
          
          # Data validation
          "pydantic==2.4.2",
          
          # Your new dependency with comment explaining its purpose
          "package_name==1.2.3",
      ]
      ```
  - description: "Organizing dependencies by function"
    correct: |
      In pyproject.toml:
      ```toml
      [project]
      name = "my_project"
      version = "0.1.0"
      description = "My Python project"
      requires-python = ">=3.10"
      
      # Core dependencies - exact versions for production
      dependencies = [
          "fastapi==0.104.0",  # Web API framework
          "numpy==1.26.0",     # Numerical operations
          "pandas==2.1.1",     # Data processing
          "pydantic==2.4.2",   # Data validation
      ]
      
      # Group optional dependencies by function
      [project.optional-dependencies]
      dev = [
          "black>=23.9.1",     # Code formatting
          "ruff>=0.0.292",     # Linting
      ]
      
      test = [
          "pytest>=7.4.2",     # Testing framework
          "pytest-cov>=4.1.0", # Test coverage
      ]
      
      docs = [
          "sphinx>=7.2.6",     # Documentation
          "sphinx-rtd-theme>=1.3.0", # Documentation theme
      ]
      
      [build-system]
      requires = ["hatchling"]
      build-backend = "hatchling.build"
      ```
  - description: "Installing dependencies with uv"
    correct: |
      ```bash
      # Install all core dependencies
      uv pip install -e .
      
      # Install with development dependencies
      uv pip install -e ".[dev]"
      
      # Install with test dependencies
      uv pip install -e ".[test]"
      
      # Install with multiple dependency groups
      uv pip install -e ".[dev,test,docs]"
      ```
  - description: "Updating dependencies with uv"
    correct: |
      ```bash
      # After updating versions in pyproject.toml
      
      # Reinstall with updated dependencies
      uv pip install -e .
      
      # After updating, check for compatibility issues
      uv pip check
      
      # Run tests to verify everything still works
      pytest
      ```
  - description: "Removing unused dependencies"
    correct: |
      ```bash
      # First identify if the dependency is truly unused
      # (check imports throughout the codebase)
      
      # Remove it from pyproject.toml
      # Then reinstall
      uv pip install -e .
      
      # Run the test suite to confirm nothing broke
      pytest
      ```
  - description: "Exporting a lockfile (when needed)"
    correct: |
      ```bash
      # While we primarily use pyproject.toml, sometimes we need a lockfile
      # Generate a lockfile for reproducible builds
      uv pip freeze > lockfile.txt
      ```
metadata:
  priority: high
  version: 1.0
</rule> 
